'''
April 7 2017
Lydia Noureldin
This program tests the solution to the ORPerceptrom problem
'''


'''
Takes in an input file of vectors separated on a new line and
returns a list of lists of vectors containing the values within
each vector
'''
def getAtoms(inputFile):
    f = open(inputFile, "r")
    vectors = []
    for line in f:
        aVector = []
        for char in line:
            if char == "[" or char == "]" or char == " " or char == "\n":
                continue
            # use int() built in function to convert the string "0" or "1" to the integer value
            aVector.append(int(char))
        if aVector != []:
            vectors.append(aVector)
    return vectors


'''
Takes in X value and a threshold and calculates Y based on these values
'''
def step(X, threshold):
    if X > threshold:
        return 1
    return 0


'''
calculates the X value given a list of weights and a vector of values
'''
def getX(aVector, weights):
    X = 0
    # make sure input is valid
    if len(aVector) != len(weights):
        print "Lengths of aVector and weights must be equal!"
    for i in range(len(aVector)):
        X = X + aVector[i] * weights[i]
    return X

'''
calculates the "OR" Perceptron values based on the trained weight values
'''
def calculate(vector, weights) :
    threshold = 0
    X = getX(vector, weights)
    Y = step(X, threshold)
    return Y

'''
writes the "OR" Perceptron values to a text file
'''
def writeOutput(file, answer):
    file.write("[" + str(answer) + "]\n\n")


'''
reads in the trained weights from an input file that are
generated by ORPerceptron_training.py and saves them in
a list of floats called trainedWeights
'''
def getTrainedWeights(inputFile):
    trainedWeights = []
    f = open(inputFile, "r")
    for line in f:
        if line != "\n":
            trainedWeights.append(float(line.strip()))
    return trainedWeights


def main():
    weights = getTrainedWeights("training.txt")
    f = open("out.txt", "w")
    vectors = getAtoms("in.txt")
    for vector in vectors:
        ans = calculate(vector, weights)
        writeOutput(f, ans)
    f.close()

main()
